package thesis

import javax.net.ssl.HttpsURLConnection
import java.io.*
import java.net.URL
import java.nio.charset.Charset
import java.util.ArrayList
import java.util.regex.Pattern

class Main_Rapid7 {

    private val numeratorFile = "rapid7_page_numbers.csv"
    private val resultFile = "rapid7-urls.csv"

    private fun scrapeUrl(number: String): AnalysisResult {

        val httpsURL = "https://www.rapid7.com/db/?q=&type=&page=$number"
        val ar = AnalysisResult()
        ar.rapid7Id = number

        try {
            val myurl = URL(httpsURL)
            val con = myurl.openConnection() as HttpsURLConnection
            con.setRequestProperty("User-Agent", "Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.4; en-US; rv:1.9.2.2) Gecko/20100316 Firefox/3.6.2") //comment
            val ins = con.inputStream
            val isr = InputStreamReader(ins)
            val `in` = BufferedReader(isr)
            var line: String? = null

            val pAfterHREF = Pattern.compile(" *<a href=\"/db/([^\"]+)\" class=\"vulndb__result resultblock\">")

            while ({ line = `in`.readLine(); line }() != null) {
                var mAfterHREF = pAfterHREF.matcher(line)
                if (mAfterHREF.find() && ar.url01 == "") {
                    ar.url01 = "/db/${mAfterHREF.group(1)}"; line = `in`.readLine()
                }
                mAfterHREF = pAfterHREF.matcher(line)
                if (mAfterHREF.find() && ar.url02 == "") {
                    ar.url02 = "/db/${mAfterHREF.group(1)}"; line = `in`.readLine()
                }
                mAfterHREF = pAfterHREF.matcher(line)
                if (mAfterHREF.find() && ar.url03 == "") {
                    ar.url03 = "/db/${mAfterHREF.group(1)}"; line = `in`.readLine()
                }
                mAfterHREF = pAfterHREF.matcher(line)
                if (mAfterHREF.find() && ar.url04 == "") {
                    ar.url04 = "/db/${mAfterHREF.group(1)}"; line = `in`.readLine()
                }
                mAfterHREF = pAfterHREF.matcher(line)
                if (mAfterHREF.find() && ar.url05 == "") {
                    ar.url05 = "/db/${mAfterHREF.group(1)}"; line = `in`.readLine()
                }
                mAfterHREF = pAfterHREF.matcher(line)
                if (mAfterHREF.find() && ar.url06 == "") {
                    ar.url06 = "/db/${mAfterHREF.group(1)}"; line = `in`.readLine()
                }
                mAfterHREF = pAfterHREF.matcher(line)
                if (mAfterHREF.find() && ar.url07 == "") {
                    ar.url07 = "/db/${mAfterHREF.group(1)}"; line = `in`.readLine()
                }
                mAfterHREF = pAfterHREF.matcher(line)
                if (mAfterHREF.find() && ar.url08 == "") {
                    ar.url08 = "/db/${mAfterHREF.group(1)}"; line = `in`.readLine()
                }
                mAfterHREF = pAfterHREF.matcher(line)
                if (mAfterHREF.find() && ar.url09 == "") {
                    ar.url09 = "/db/${mAfterHREF.group(1)}"; line = `in`.readLine()
                }
                mAfterHREF = pAfterHREF.matcher(line)
                if (mAfterHREF.find() && ar.url10 == "") {
                    ar.url10 = "/db/${mAfterHREF.group(1)}"; line = `in`.readLine()
                }
                mAfterHREF = pAfterHREF.matcher(line)
                if (mAfterHREF.find() && ar.url11 == "") {
                    ar.url11 = "/db/${mAfterHREF.group(1)}"; line = `in`.readLine()
                }
                mAfterHREF = pAfterHREF.matcher(line)
                if (mAfterHREF.find() && ar.url12 == "") {
                    ar.url12 = "/db/${mAfterHREF.group(1)}"; line = `in`.readLine()
                }
                mAfterHREF = pAfterHREF.matcher(line)
                if (mAfterHREF.find() && ar.url13 == "") {
                    ar.url13 = "/db/${mAfterHREF.group(1)}"; line = `in`.readLine()
                }
                mAfterHREF = pAfterHREF.matcher(line)
                if (mAfterHREF.find() && ar.url14 == "") {
                    ar.url14 = "/db/${mAfterHREF.group(1)}"; line = `in`.readLine()
                }
                mAfterHREF = pAfterHREF.matcher(line)
                if (mAfterHREF.find() && ar.url15 == "") {
                    ar.url15 = "/db/${mAfterHREF.group(1)}"; line = `in`.readLine()
                }
                mAfterHREF = pAfterHREF.matcher(line)
                if (mAfterHREF.find() && ar.url16 == "") {
                    ar.url16 = "/db/${mAfterHREF.group(1)}"; line = `in`.readLine()
                }
                mAfterHREF = pAfterHREF.matcher(line)
                if (mAfterHREF.find() && ar.url17 == "") {
                    ar.url17 = "/db/${mAfterHREF.group(1)}"; line = `in`.readLine()
                }
                mAfterHREF = pAfterHREF.matcher(line)
                if (mAfterHREF.find() && ar.url18 == "") {
                    ar.url18 = "/db/${mAfterHREF.group(1)}"; line = `in`.readLine()
                }
                mAfterHREF = pAfterHREF.matcher(line)
                if (mAfterHREF.find() && ar.url19 == "") {
                    ar.url19 = "/db/${mAfterHREF.group(1)}"; line = `in`.readLine()
                }
                mAfterHREF = pAfterHREF.matcher(line)
                if (mAfterHREF.find() && ar.url20 == "") {
                    ar.url20 = "/db/${mAfterHREF.group(1)}"; line = `in`.readLine()
                }
            }
            `in`.close()
        } catch (e: IOException) {
            val errorText = "Page not found"
            ar.url01 = errorText
            ar.url02 = errorText
            ar.url03 = errorText
            ar.url04 = errorText
            ar.url05 = errorText
            ar.url06 = errorText
            ar.url07 = errorText
            ar.url08 = errorText
            ar.url09 = errorText
            ar.url10 = errorText
            ar.url11 = errorText
            ar.url12 = errorText
            println("Received FileNotFound error for " + ar.edbId)
        }
        return ar
    }

    private fun read(): ArrayList<String> {
        val al = ArrayList<String>()
        try {
            val cveSampleContent = File(this.numeratorFile)
            val fis = FileInputStream(cveSampleContent)
            val isr = InputStreamReader(fis, Charset.forName("UTF-8"))
            val input = BufferedReader(isr)

            var line: String? = null
            while ({ line = input.readLine(); line }() != null) {
                if (line == "") al.add("-Empty-")
                else al.add(line!!)
            }
            input.close()
        } catch (e: IOException) {
            e.printStackTrace()
        }
        return al
    }

    private fun offlineResults(ar: AnalysisResult) {
        try {
            val cveResultData = File(this.resultFile)
            val fos = FileOutputStream(cveResultData, true)
            val osr = OutputStreamWriter(fos, Charset.forName("UTF-8"))
            val out = BufferedWriter(osr)

            out.write("${ar.url01}\n${ar.url02}\n${ar.url03}\n${ar.url04}\n${ar.url05}\n${ar.url06}\n${ar.url07}\n" +
                    "${ar.url08}\n${ar.url09}\n${ar.url10}\n${ar.url11}\n${ar.url12}\n${ar.url13}\n${ar.url14}\n" +
                    "${ar.url15}\n${ar.url16}\n${ar.url17}\n${ar.url18}\n${ar.url19}\n${ar.url20}\n")
            out.close()
        } catch (e: IOException) {
            e.printStackTrace()
        }
    }

    companion object {

        @JvmStatic
        fun main(args: Array<String>) {
            val start = Main_Rapid7()
            val al = start.read()
            for (s in al) {
                val ar = start.scrapeUrl(s)
                start.offlineResults(ar)
                println("${ar}\n Entry: $s")
            }
        }
    }
}
